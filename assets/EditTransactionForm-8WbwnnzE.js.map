{"version":3,"file":"EditTransactionForm-8WbwnnzE.js","sources":["../../src/components/EditTransactionForm/EditTransactionForm.jsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\nimport ReactDatePicker from \"react-datepicker\";\nimport * as Yup from \"yup\";\n\nimport CustomInputCalendar from \"../AddTransactionForm/CustomInputCalendar\";\nimport { Icon } from \"../../images/Icon/Icon\";\nimport Modal from \"../Modal/Modal\";\nimport toast, { Toaster } from \"react-hot-toast\";\n\nimport useMedia from \"../../hooks/useMedia\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectCategories } from \"../../redux/transactions/selectors\";\nimport { patchTransactionThunk } from \"../../redux/transactions/operations\";\n\nimport s from \"./EditTransactionForm.module.css\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nconst EditTransactionForm = ({ transaction, closeModal }) => {\n  const [startDate, setStartDate] = useState(\n    transaction ? new Date(transaction.transactionDate) : new Date()\n  );\n  const [transactionType] = useState(transaction.type);\n  const [defaultIncomeCategory, setDefaultIncomeCategory] = useState(null);\n\n  const dispatch = useDispatch();\n  const categories = useSelector(selectCategories);\n  const { isMobile } = useMedia();\n  useEffect(() => {\n    if (categories.length > 0) {\n      const defaultCategory = categories.find(\n        (category) => category.type === \"INCOME\"\n      );\n      setDefaultIncomeCategory(defaultCategory ? defaultCategory.id : null);\n    }\n  }, [categories]);\n\n  const categoryName = transaction\n    ? categories.find((category) => category.id === transaction.categoryId)\n        ?.name\n    : \"\";\n\n  const validationSchema = Yup.object({\n    amount: Yup.number()\n      .required(\"Amount is required\")\n      .positive(\"Amount must be positive\"),\n    comment: Yup.string().required(\"Comment is required\"),\n    category: Yup.string().when(\"transactionType\", {\n      is: \"EXPENSE\",\n      then: (schema) => schema.required(\"Category is required\").nullable(),\n    }),\n  });\n\n  const handleSubmit = (values, { setSubmitting }) => {\n    const updatedTransaction = {\n      id: transaction.id,\n      transactionDate: startDate.toISOString(),\n      type: transactionType,\n      categoryId:\n        transactionType === \"INCOME\"\n          ? defaultIncomeCategory\n          : transaction.categoryId,\n      comment: values.comment,\n      amount:\n        transactionType === \"INCOME\"\n          ? parseFloat(values.amount)\n          : -parseFloat(values.amount),\n    };\n\n    if (\n      updatedTransaction.categoryId === null &&\n      transactionType === \"EXPENSE\"\n    ) {\n      setSubmitting(false);\n      return;\n    }\n\n    dispatch(patchTransactionThunk(updatedTransaction))\n      .unwrap()\n      .then(() => {\n        closeModal();\n        setSubmitting(false);\n      })\n      .catch((error) => {\n        toast.error(error);\n        setSubmitting(false);\n      });\n  };\n\n  return (\n    <div>\n      <Toaster />\n      <Modal closeModal={closeModal}>\n        {!isMobile && (\n          <div onClick={closeModal}>\n            <Icon\n              id=\"icon-close\"\n              width={16}\n              height={16}\n              className={s.iconClose}\n            />\n          </div>\n        )}\n        <p className={s.title}>Edit transaction</p>\n        <div className={s.toggleContainer}>\n          <span className={transactionType === \"INCOME\" ? s.active : \"\"}>\n            Income\n          </span>\n          <span className={s.separator}>/</span>\n          <span className={transactionType === \"EXPENSE\" ? s.active : \"\"}>\n            Expense\n          </span>\n        </div>\n        <Formik\n          initialValues={{\n            amount: transaction ? Math.abs(transaction.amount) : \"\",\n            comment: transaction ? transaction.comment : \"\",\n            category: categoryName,\n            transactionType: transactionType,\n          }}\n          validationSchema={validationSchema}\n          onSubmit={handleSubmit}\n        >\n          {({ isSubmitting, setFieldValue }) => (\n            <Form className={s.form}>\n              {transactionType === \"EXPENSE\" && (\n                <Field\n                  type=\"text\"\n                  name=\"category\"\n                  placeholder=\"Category\"\n                  className={s.inputF}\n                  readOnly\n                  value={categoryName}\n                />\n              )}\n              <div className={s.column}>\n                <div className={s.inputs}>\n                  <Field\n                    type=\"number\"\n                    name=\"amount\"\n                    placeholder=\"0.00\"\n                    className={s.inputField}\n                  />\n\n                  <div>\n                    <ReactDatePicker\n                      selected={startDate}\n                      onChange={(date) => {\n                        setStartDate(date);\n                        setFieldValue(\"transactionDate\", date);\n                      }}\n                      dateFormat=\"dd.MM.yyyy\"\n                      className={s.dateInput}\n                      customInput={<CustomInputCalendar />}\n                    />\n                  </div>\n                </div>\n                <ErrorMessage\n                  name=\"amount\"\n                  component=\"div\"\n                  className={s.error}\n                />\n                <Field\n                  type=\"text\"\n                  name=\"comment\"\n                  placeholder=\"Comment\"\n                  className={s.commentInput}\n                />\n                <ErrorMessage\n                  name=\"comment\"\n                  component=\"div\"\n                  className={s.error}\n                />\n              </div>\n              <button type=\"submit\" className={s.save} disabled={isSubmitting}>\n                SAVE\n              </button>\n            </Form>\n          )}\n        </Formik>\n      </Modal>\n    </div>\n  );\n};\n\nexport default EditTransactionForm;\n"],"names":["EditTransactionForm","transaction","closeModal","startDate","setStartDate","useState","transactionType","defaultIncomeCategory","setDefaultIncomeCategory","dispatch","useDispatch","categories","useSelector","selectCategories","isMobile","useMedia","useEffect","defaultCategory","category","categoryName","_a","validationSchema","Yup.object","Yup.number","Yup.string","schema","handleSubmit","values","setSubmitting","updatedTransaction","patchTransactionThunk","error","toast","jsx","Toaster","jsxs","Modal","Icon","s","Formik","isSubmitting","setFieldValue","Form","Field","ReactDatePicker","date","CustomInputCalendar","ErrorMessage"],"mappings":"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"}